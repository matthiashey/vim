call plug#begin('~/.vim/plugged')

"Theme
Plug 'morhetz/gruvbox'
" Plug 'sickill/vim-monokai'

"Syntax & languages
Plug 'scrooloose/syntastic'
Plug 'OrangeT/vim-csharp'
Plug 'sheerun/vim-polyglot'

"Other
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'ctrlpvim/ctrlp.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'rking/ag.vim'
Plug 'Chiel92/vim-autoformat'
Plug 'bling/vim-bufferline'
Plug 'drmikehenry/vim-fontsize'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-sensible'
Plug 'easymotion/vim-easymotion'
Plug 'haya14busa/incsearch.vim'
Plug 'junegunn/vim-easy-align'
" Plug 'ternjs/tern_for_vim', { 'do': 'npm install', 'for': 'javascript' }

" function! BuildYCM(info)
"     if WINDOWS()
"         if a:info.status == 'installed' || a:info.force
"             !./python install.py --tern-completer
"         endif
"     else
"         if a:info.status == 'installed' || a:info.force
"             !./install.py --tern-completer
"         endif
"     endif
" endfunction

" Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM'), 'on': [] }
" command! YcmCompleter call plug#load('YouCompleteMe') | call youcompleteme#Enable() | YcmCompleter

call plug#end()

" map <C-S-y> :YcmCompleter<CR>

" tern
" let g:tern_show_argument_hints='on_hold'
" and
" let g:tern_map_keys=1

" Syntastic
" let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_javascript_checkers = ['eslint']
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
" show any linting errors immediately
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1

" incsearch
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" Easymotion
map <Leader> <Plug>(easymotion-prefix)

let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Jump to anywhere you want with minimal keystrokes, with just one key
" binding.
" " `s{char}{label}`
" nmap s <Plug>(easymotion-overwin-f)
" " or
" " `s{char}{char}{label}`
" " Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-overwin-f2)
"
" " Turn on case insensitive feature
let g:EasyMotion_smartcase = 1
"
" " JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)
"
" " Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)
" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" NERDTree
map <C-n> :NERDTreeToggle<CR>

if isdirectory(expand("~/.vim/plugged/nerdtree"))
    map <C-e> <plug>NERDTreeTabsToggle<CR>
    map <leader>e :NERDTreeFind<CR>
    nmap <leader>nt :NERDTreeFind<CR>

    let NERDTreeShowBookmarks=1
    let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
    let NERDTreeChDirMode=0
    let NERDTreeQuitOnOpen=0
    let NERDTreeMouseMode=2
    let NERDTreeShowHidden=1
    let NERDTreeKeepTreeInNewTab=1
    let g:nerdtree_tabs_open_on_gui_startup=0
endif

" close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" ctrlp
if isdirectory(expand("~/.vim/plugged/ctrlp.vim/"))
    let g:ctrlp_cache_dir = '~/.vim/cache/ctrlp'
    let g:ctrlp_working_path_mode = 'ra'
    nnoremap <silent> <D-t> :CtrlP<CR>
    nnoremap <silent> <D-r> :CtrlPMRU<CR>


    let g:ctrlp_user_command = 'Ag -i --nocolor --nogroup --hidden -g "" %s'
    " let g:ctrlp_user_command = 'Ag %s -l --nocolor -g ""'
    " let g:ctrlp_custom_ignore = {
    "             \ 'dir':  '\.git$\|\.hg$\|\.svn$',
    "             \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$'}

    "if executable('ag')
    " let s:ctrlp_fallback = 'Ag -i --nocolor --nogroup --hidden -g "" %s'
    "    elseif executable('ack-grep')
    "        let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
    "    elseif executable('ack')
    "        let s:ctrlp_fallback = 'ack %s --nocolor -f'
    "    elseif (has("win32") || has("win64") || has("win95") || has("win16"))
    "        let s:ctrlp_fallback = 'dir %s /-n /b /s /a-d'
    "    else
    "        let s:ctrlp_fallback = 'find %s -type f'
    "endif

    "    if exists("g:ctrlp_user_command")
    "        unlet g:ctrlp_user_command
    "    endif
    "
    "    let g:ctrlp_user_command = {
    "                \ 'types': {
    "                \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
    "                \ 2: ['.hg', 'hg --cwd %s locate -I .'],
    "                \ },
    "                \ 'fallback': s:ctrlp_fallback
    "                \ }

    "     if isdirectory(expand("~/.vim/plugged/ctrlp-funky/"))
    "         " CtrlP extensions
    "         let g:ctrlp_extensions = ['funky']
    "         "funky
    "         nnoremap <Leader>fu :CtrlPFunky<Cr>
    "     endif
endif

" AutoCloseTag
" Make it so AutoCloseTag works for xml and xhtml files as well
au FileType xhtml,xml ru ftplugin/html/autoclosetag.vim
nmap <Leader>ac <Plug>ToggleAutoCloseMappings

" Autoformat
noremap <F3> :Autoformat<CR>

" Easy-Align
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
